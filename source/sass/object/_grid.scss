@use 'sass:math';

$o-grid-gap: var(--o-grid-gap, 4);
$o-grid-columns: 12 !default;
$o-grid-breakpoints: map-keys($breakpoints-map) !default;

$o-grid-gutters: (
    xs : calc(#{$base} * #{$o-grid-gap} * 0.5), //16
    md : calc(#{$base} * #{$o-grid-gap} * 0.75),  //24
    lg : calc(#{$base} * #{$o-grid-gap}), // 32
) !default;

@mixin generateGrid($columns, $breakpoints, $gutters, $includePrint: true) {
    .o-grid,
    .grid {
        display: flex;
        flex-wrap: wrap;

        &.o-grid--stretch {
            @include stretch();
        }

        > %column {
            position: relative;
            width: 100%;
            min-height: 1px;
        }
    }

    .o-grid,
    .grid {
        > * {
            @extend %column;
        }    
    }

    //Gutter styles
    @each $breakpoint, $gutter in $gutters {
        @include mq($breakpoint) {
            .o-grid + .o-grid,
            .grid + .grid,
            .o-grid + .grid,
            .grid + .o-grid  {
                margin-top: #{$gutter};
            }

            .o-grid.o-grid--form + .o-grid.o-grid--form,
            .grid.grid--form + .grid.grid--form,
            .o-grid.o-grid--form + .grid.grid--form,
            .grid.grid--form + .o-grid.o-grid--form  {
                margin-top: calc(#{$gutter} * .5);
            }
        }
    }

    //Nowrap
    .o-grid.o-grid--nowrap,
    .grid.grid--nowrap  {
        flex-wrap: nowrap;
    }
    @each $breakpoint in $breakpoints {
        $suffix: get-breakpoint-suffix($breakpoint, null);
        @include mq($breakpoint) {
            .o-grid.o-grid--nowrap#{$suffix},
            .grid.grid-#{$breakpoint}--nowrap {
                flex-wrap: nowrap;
            }
        }
    }

    //Reversed row
    .o-grid.o-grid--row-reverse,
    .grid.grid--row-reverse {
        flex-direction: row-reverse;
    }

    //Reversed col
    .o-grid.o-grid--col-reverse,
    .grid.grid--col-reverse {
        flex-direction: column-reverse;
    }

    // Equal height elements modifier
    .o-grid.o-grid--equal-elements > * ,
    .grid.grid--equal-elements > * {
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
        flex-wrap: wrap;

        > * {
            flex: 1;
        }
    }

    .o-grid + .o-grid,
    .grid + .grid,
    .o-grid + .grid,
    .grid + .o-grid  {
        margin-top: calc(#{$base} * #{$o-grid-gap} * 0.5);
    }

    .o-grid.o-grid--form + .o-grid.o-grid--form,
    .grid.grid--form + .grid.grid--form,
    .o-grid.o-grid--form + .grid.grid--form,
    .grid.grid--form + .o-grid.o-grid--form  {
        margin-top: #{calc(#{$base} * #{$o-grid-gap} * 0.25)}; 
    }

    .o-grid,
    .grid {
        --grid-gap: calc(#{$base} * #{$o-grid-gap} * 0.5);
        gap: var(--grid-gap);

        &.o-grid--horizontal {
            gap: 0 var(--grid-gap);
        }

        &.o-grid--vertical {
            gap: var(--grid-gap) 0;
        }

        &.o-grid--form,
        &.o-grid--half-gutter {
            --grid-gap: #{calc(#{$base} * #{$o-grid-gap} * 0.25)}; 
        }

        .u-flex--gridgap {
            gap: var(--grid-gap) !important;
        }

        .u-flex--gridgap-row {
            row-gap: var(--grid-gap) !important;
        }

        .u-flex--gridgap-col {
            column-gap: var(--grid-gap) !important;
        }
    }

    //Gutter styles
    @each $breakpoint, $gutter in $gutters {
        @include mq($breakpoint) {
            .o-grid,
            .grid {
                --grid-gap: #{$gutter};
                gap: var(--grid-gap);
            }

            .o-grid.o-grid--horizontal {
                gap: 0 var(--grid-gap);
            }

            .o-grid.o-grid--vertical {
                gap: var(--grid-gap) 0;
            }

            // Form column margins modifier
            .o-grid.o-grid--form,
            .o-grid.o-grid--half-gutter {
                --grid-gap: #{calc($gutter / 2)}; 
            }

            //Utility 
            .u-flex--gridgap {
                gap: var(--grid-gap) !important;
            }

            .u-flex--gridgap-row {
                row-gap: var(--grid-gap) !important;
            }

            .u-flex--gridgap-col {
                column-gap: var(--grid-gap) !important;
            }
        }
    }

    .o-grid.o-grid--no-gutter,
    .grid.grid--no-gutter {
        --grid-gap: 0px;
    }

    .o-grid.o-grid--no-margin,
    .grid.grid--no-margin {
        --grid-gap: 0px;
    }
    
    .o-grid.o-grid--valign,
    .grid.grid--valign {
        align-items: center;
    }

    //Include print breakpoint
    @if $includePrint == true {
        $breakpoints: append($breakpoints, "print");
    }

    //Generate Columns
    @each $breakpoint in $breakpoints {
        $suffix: get-breakpoint-suffix($breakpoint, null);
        
        //Generate list of column classes
        $columnClasses: ();
        @for $i from 1 to $columns + 1 {
            $columnClasses: append($columnClasses, ", .o-grid > .o-grid-#{$i}#{$suffix}");
            $columnClasses: append($columnClasses, ", .grid > .grid-#{$breakpoint}-#{$i}");
        }

        //Apply common column styles
        .o-grid-auto#{$suffix},
        .o-grid-fit#{$suffix},
        .grid-#{$breakpoint}-auto,
        .grid-#{$breakpoint}-fit,
        #{$columnClasses} {
            @extend %column;
        }

        //Breakpoint specific
        @include mq($breakpoint) {

            //Auto width column (eg .o-grid-auto@md)
            .o-grid-auto#{$suffix},
            .grid-#{$breakpoint}-auto {
                flex: 1 1 0;
                max-width: 100%;
                min-width: 0;
            }

            //Fit content column (eg .o-grid-fit@md)
            .o-grid > .o-grid-fit#{$suffix},
            .grid > .grid-#{$breakpoint}-fit {
                flex: 0 0 auto;
                width: auto;
                max-width: none;
            }

            //Support for standard gutter
            @for $i from 1 to $columns {
                $columnWidth: (math.div($i, $columns) * 100) * 1%;
                $gapWidth: calc(var(--grid-gap) * (1 - ($i/$columns)));
                $columnWidthAfterSubtractGap: calc(#{$columnWidth} - #{$gapWidth});

                //Width based Columns (eg .o-grid-6@md, o-grid-4@lg)
                .o-grid-#{$i}#{$suffix},
                .grid-#{$breakpoint}-#{$i} {
                    flex: 0 0 $columnWidthAfterSubtractGap;
                    max-width: $columnWidthAfterSubtractGap;
                }

                //Order (eg .o-order-1@md)
                .o-order-#{$i}#{$suffix},
                .order-#{$breakpoint}-#{$i} {
                    order: $i;
                }

                //Offset (eg .o-offset-4@md)
                .o-offset-#{$i}#{$suffix},
                .offset-#{$breakpoint}-#{$i} {
                    margin-left: calc(#{$columnWidthAfterSubtractGap} + var(--grid-gap));
                }
            }
        }
    }
}

@include generateGrid($o-grid-columns, $o-grid-breakpoints, $o-grid-gutters);

