@use "../mixin/responsive-styles";
@use "../function/append-important";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "sass:list";

@mixin build-utilities($utility_specs, $responsive: true, $limitToBreakpoint: true) {
    @if meta.type-of($utility_specs) == list {
        @each $utility in $utility_specs {
            @include apply-utility($utility, $limitToBreakpoint);
        }
    } @else {
        @include apply-utility($utility_specs, $limitToBreakpoint);
    }
}

@mixin apply-utility($utility, $limitToBreakpoint: true) {
    $name: map.get($utility, "name");
    $modifiers: map.get($utility, "modifiers");
    $default: map.get($utility, "default");

    $pseudo: null;
    $clean-name: $name;

    // Detect if utility name contains a pseudo-element (::before or ::after)
    @if string.index($name, "::") {
        $pseudo: string.slice($name, string.index($name, "::"));
        $clean-name: string.slice($name, 1, string.index($name, "::") - 1);
    }

    @if $default {
        @include responsive-styles.responsiveStyles(
            (".u-#{$clean-name}#{$pseudo}": append-important.appendImportant($default)),
            all,
            $limitToBreakpoint
        );
    }

    @if $modifiers {
        @each $modifier in $modifiers {
            .u-#{$clean-name}--#{"" + list.nth($modifier,1)}#{$pseudo} {
                @each $property, $value in list.nth($modifier, 2) {
                    #{$property}: #{$value} !important;
                }
            }
        }

        @each $modifier in $modifiers {
            $style: list.nth($modifier, 2);
            @include responsive-styles.responsiveStyles(
                (".u-#{$clean-name}--#{"" + list.nth($modifier,1)}#{$pseudo}": append-important.appendImportant($style)),
                all,
                $limitToBreakpoint
            );
        }
    }
}